#+title: C Learning Topics

* General
** TODO What are inline functions? [Fit this in other chapters]
- The ARM compilers support inline functions with the keyword
  /_inline/.
- These functions have a small definition and the function body is
  substituted in each call to the inline function.
- The arguement passing and stack maintenance is skipped and it
  results in faster code execution, but it increases the code size,
  particularly if the inline function is large or one inline function
  is oftern used.
** DONE Can include files be nested?
- Yes, include files can be nested any number of times. But you have
  to make sure that you are not including the same file twice.
- There is no limit to how many header files that can be included.
- But the number can be compiler dependent, since including multiple
  header files may cause your computer to run out of stack memory.

* Data types
** What is the size of character, integer, integer pointer, character pointer?
- The size of character is 1 byte, integer is 4 bytes.
- The size of integer pointer and character is 8 bytes on 64-bit
  machine and 4 bytes on 32 bit machine.
* Storage classes in C 
[Source: geekforgeeks [[https://www.google.com/url?client=internal-uds-cse&cx=009682134359037907028:tj6eafkv_be&q=https://www.geeksforgeeks.org/storage-classes-in-c/&sa=U&ved=2ahUKEwi9t8CGyu_hAhVHzaQKHcg2BqoQFjAAegQIBhAB&usg=AOvVaw3qgAeah-xn-P8-ii93oDtq][storage classes in C]]]
Storage classes are used to describe the features of a
variable/function. These features basically include the scope,
visibility and life-time which help us to trace the existence of a
particular variable during the runtime of a program.

Syntax:
#+BEGIN_SRC C
storage_class var_data_type var_name;
#+END_SRC

C language uses 4 storage classes, namely:
| ----------------- |------------- | ------------- | ---------------------- | -------------------- |
| Storage Specifier | Storage      | Initial Value | Scope                  | Life                 |
| ----------------  |------------- | ------------- | ---------------------- | -------------------- |
| auto              | stack        | Garbage       | Within block           | End of block         |
| extern            | Data segment | Zero          | global Multiple files  | Till end of program  |
| static            | Data segment | Zero          | Within block           | Till end of program  |
| register          | CPU register | Garbage       | Within block           | End of block         |
| ----------------- | ------------ | ------------- | ---------------------- | -------------------- |

** auto 
- This is the default storage class for all the variables declared
  inside a function or block.
- Keyword auto is generally ignored.
- To access the auto variables outside their scope, we use pointers.
** extern
- Extern storage class simply tells us that the variable is defined
  elsewhere and not within the same block where it is used.
- An extern variable is nothing but a global variable initialized with
  a legal value where it is declared in order to be used elsewhere.
- The main purpose of using extern variables is that they can be
  accessed between two different files which are part of a large program.
** static
- Static variables have property of preserving the value even after
  they are out of their scope.
- The static variables are initialized once and exist till the
  termination of program. Thus, no new memory is allocated because
  they are not re-declared.
*** Can static variables be declared in a header file?
- A static variable can not be declared without defining it. A static
  variable can be defined in the header file.
- But doing so, the result will be having a private copy of that
  variable in each source file which includes the header file.
- So, it is not wise to declare a static variable in header file,
  unless you are dealing with some special scenario.
** register
- This storage class declares register variables which have the same
  functionality as that of the auto variables.
- The only difference is that the  compiler tries to store these
  variables in the register of the microprocessor if a free register
  is available.
- This makes the use of register variables to be much faster than that
  of the variables stored in the memory during the runtime of the
  program.
- If a free register is not available, these are then stored in the
  memory only. Usually few variables which are to be accessed very
  frequently in a program are declared with the register keyword which
  improves the running time of the program.
- An important and interesting point to be noted here is that we
  cannot obtain the address of a register variable using pointers.

* Volatile variables
[source: [[https://stackoverflow.com/questions/1665452/volatile-variable#][volatile variable]], [[http://msdn.microsoft.com/en-us/library/888bfst6%2528VS.80%2529.aspx][type qualifier]]] 
- Volatile is a type qualifier not storage class specifier so it does
  not determine storage location at all; it affects the definition of
  a variable's type, not its storage.
- It simply forces the compiler to explicitly read a variable whose
  type is volatile from the variable's storage location (wherever that
  may be) rather than assuming that some previously read value in a
  register for example remains valid.
- In C/C++, the qualifier 'volatile' indicates that an object may be
  changed by something external to the program at any time and so must
  be re-read from memory every time it is accessed.

[source: [[https://www.youtube.com/watch?v=VOT1GiLhuNQ][Youtube]]]
- The C's volatile keyword is a qualifier that tells the compiler not
  to optimize when applied to a variable.
- By declaring a variable volatile, we can tell the compiler that the
  value of the variable may change any moment from outside of the
  scope of the program.
- A variable should be declared volatile whenever its value could
  change unexpectedly and beyond the comprehension of the compiler.
- In those cases it is required not to optimize the code, doing so may
  lead to erroneous result and load the variable every time it is used
  in the program.
- *Volatile keyword is useful for memory-mapped peripheral registers,
  global variables modified by an interrup service routine, global
  variables accessed by multiple tasks within a multi-threaded
  application.*
** What are the uses of the keyword volatile?
- Volatile keyword is used to prevent compiler to optimize a variable
  which can change unexpectedly beyond compiler's comprehension.
- Suppose, we have a variable which may be changed from scope out of
  the program, say by a signal, we do not want the compiler to
  optimize it.
- Rather than optimizing that variable, we want the compiler to load
  the variable every time it is encountered. If we declare a variable
  as volatile, compiler will not cache it in its register.
** Can a variable be both const and volatile?
- The *const* keyword make sure that the value of the variable
  declared as const can't be changed.
- This statement holds true in the scope of the program. The value can
  still be changed by outside intervention. So, the use of 'const'
  with volatile keyword makes perfect sense.
*** On what scenarios do we require both const and volaitle variables?
[source: [[https://stackoverflow.com/questions/4592762/difference-between-const-const-volatile][Stack_Overflow]]]
- An object marked as /const volatile/ will not be permitted to be
  changed by the code(an error will be raised due to the /const/
  qualifier) - at least through that particular name/pointer.
- The /volatile/ part of the qualifier means that the compiler cannot
  optimize or reorder access to the object.
- In an embedded system, this is typically used to access hardware
  reigsters that can be read and are updated by the hardware, but
  makes no sense to write to(or might be an error to write to).
*** Example
An example might be the status register for a serial port. Various
bits will indicate if a character is waiting to be read or if the
transmit register is ready to accept a new character (ie., - it's
empty). Each read of this status register could result in a different
value depending on what else has occurred in the serial port hardware.

It makes no sense to write to the status register (depending on the
particular hardware spec), but you need to make sure that each read of
the register results in an actual read of the hardware - using a
cached value from a previous read won't tell you about changes in the
hardware state.

A quick example:
#+BEGIN_SRC C
unsigned int const volatile *status_reg;
unsigned char const volatile *recv_reg;

#define UART_CHAR_READY 0x00000001

int get_next_char()
{
    while((*status_reg && UART_CHAR_READY) == 0)
    {
       // do nothing but spin
    }

    return *recv_reg;
}
#+END_SRC

If these pointers were not marked as being /volatile/, a couple of
problems might occur:
  1. the while loop test might read the status register only once,
     since the compiler could assume that whetever it pointed to would
     never change ( there's nothing in the while loop test or loop
     itself that could change it). If you entered the function when
     there was no character waiting in UART hardware, you might end up
     in an infinite loop that never stopped even when a character was
     received.
  2. the read of the receive register could be moved by the compiler
     to before the while loop - again because there's nothing in the
     function that indicates that /*recv_reg/ is changed by the loop,
     there's no reason that it cannot be read before entering the
     loop.
The /volatile/ qualifiers ensures that these optimizations are not
performed by the compiler.
** Can a pointer be volatile?
- If we see the declaration /volatile int *p/, it means that the
  pointer itself is not volatile and points to an integer that is volatile.
- This is to inform the compiler that pointer p is pointing to an
  integer and the value of the integer may change unexpectedly even if
  there is no code indicating so in the program.
* Macros and constants
[Source: [[https://stackoverflow.com/questions/3216752/what-is-the-difference-between-macro-constants-and-constant-variables-in-c][Macros vs constants]]]

Macros are handled by the pre-processor - the pre-processor does text
replacement in your source file, replacing all occurances of 'A' with
the literal 8.


Constants are handled by the compiler. They have the added benefit of
type safety.


For the actual compiled code, with any modern compiler, there should
be zero performance difference between the two.

* C build process
[Source: [[https://stackoverflow.com/questions/6264249/how-does-the-compilation-linking-process-work][Stack Overflow]]]

The compilation of a C++ program involves three steps:

    Preprocessing: the preprocessor takes a C++ source code file and
    deals with the #includes, #defines and other preprocessor
    directives. The output of this step is a "pure" C++ file without
    pre-processor directives.

    Compilation: the compiler takes the pre-processor's output and
    produces an object file from it.

    Linking: the linker takes the object files produced by the
    compiler and produces either a library or an executable file.

Preprocessing

The preprocessor handles the preprocessor directives, like #include
and #define. It is agnostic of the syntax of C++, which is why it must
be used with care.

It works on one C++ source file at a time by replacing #include
directives with the content of the respective files (which is usually
just declarations), doing replacement of macros (#define), and
selecting different portions of text depending of #if, #ifdef and
#ifndef directives.

The preprocessor works on a stream of preprocessing tokens. Macro
substitution is defined as replacing tokens with other tokens (the
operator ## enables merging two tokens when it makes sense).

After all this, the preprocessor produces a single output that is a
stream of tokens resulting from the transformations described
above. It also adds some special markers that tell the compiler where
each line came from so that it can use those to produce sensible error
messages.

Some errors can be produced at this stage with clever use of the #if
and #error directives.  Compilation

The compilation step is performed on each output of the
preprocessor. The compiler parses the pure C++ source code (now
without any preprocessor directives) and converts it into assembly
code. Then invokes underlying back-end(assembler in toolchain) that
assembles that code into machine code producing actual binary file in
some format(ELF, COFF, a.out, ...). This object file contains the
compiled code (in binary form) of the symbols defined in the
input. Symbols in object files are referred to by name.

Object files can refer to symbols that are not defined. This is the
case when you use a declaration, and don't provide a definition for
it. The compiler doesn't mind this, and will happily produce the
object file as long as the source code is well-formed.

Compilers usually let you stop compilation at this point. This is very
useful because with it you can compile each source code file
separately. The advantage this provides is that you don't need to
recompile everything if you only change a single file.

The produced object files can be put in special archives called static
libraries, for easier reusing later on.

It's at this stage that "regular" compiler errors, like syntax errors
or failed overload resolution errors, are reported.  Linking

The linker is what produces the final compilation output from the
object files the compiler produced. This output can be either a shared
(or dynamic) library (and while the name is similar, they haven't got
much in common with static libraries mentioned earlier) or an
executable.

It links all the object files by replacing the references to undefined
symbols with the correct addresses. Each of these symbols can be
defined in other object files or in libraries. If they are defined in
libraries other than the standard library, you need to tell the linker
about them.

At this stage the most common errors are missing definitions or
duplicate definitions. The former means that either the definitions
don't exist (i.e. they are not written), or that the object files or
libraries where they reside were not given to the linker. The latter
is obvious: the same symbol was defined in two different object files
or libraries.

* Memory allocation of variables

* Bit-wise operators
[set-reset specific bit of a byte, swap nibbles in byte, toggling bit]

* Dynamic memory allocation
[How does the free work? malloc, calloc and realloc; difference
between them]

* Pointers
** What is NULL pointer and what is its use?
- The NULL is a macro defined in C.
- NULL pointer actually means a pointer that does not point to any
  valid location.
- We define a pointer to be null when we want to make sure that the
  pointer does not point to any valid location and not to use that
  pointer to change anything.
- If we don't use null pointer, then we can't verify whether this
  pointer points to any valid location or not.
** What is a void pointer and what is its use?
- The void pointer means that it points to a variable that can be of
  any type.
- Other pointers point to a specific type of variable while void
  pointer is a somewhat generic pointer and can be pointed to any data
  type, be it standard data type (int, char etc.) or use defined data
  type (structure, union etc.)
- We can pass any kind of pointer and reference it as a void
  pointer. But to dereference it, we have to type the void pointer to
  correct data type.

* Call by value and call by reference
 [Write down the examples]

* structure padding
 [

* Macros and typedefs
[Source: [[https://stackoverflow.com/questions/1666353/are-typedef-and-define-the-same-in-c][stack_overflow]]]
'#define' is a preprocessor token: the compiler itself will never see it.
'typedef' is a compiler token: the preprocessor does not care about
it.

typedef obeys scoping rules just like variables, whereas define stays valid until the end of the file (or until a matching undef).

Also, some things can be done with typedef that cannot be done with define.

Examples:

#+BEGIN_SRC C
typedef int* int_p1;
int_p1 a, b, c;  // a, b, and c are all int pointers.

#define int_p2 int*
int_p2 a, b, c;  // only the first is a pointer!

.

typedef int a10[10];
a10 a, b, c; // create three 10-int arrays

.

typedef int (*func_p) (int);
func_p fp // func_p is a pointer to a function that
          // takes an int and returns an int
#+END_SRC

* Union vs structures


** Pragma !?

* Linked lists
In computer science, a Linked list is a linear collection of data
elements, whose order is not given by their physical placement in
memory. Instead, each element points to the next. It is a data
structure consisting of a collection of nodes which together represent
a sequence. In its most basic form, each node contains: data, and a
reference (in other words, a link) to the next node in the sequence. 

* File Scope and Global Scope: C & C++


A variable with file scope can be accessed by any function or block
within a single file. To declare a file scoped variable, simply
declare a variable outside of a block (same as a global variable) but
use the static keyword.


#+BEGIN_SRC C
static int nValue; // file scoped variable
float fValue; // global variable

int main()
{
    double dValue; // local variable
}
#+END_SRC

File scoped variables act exactly like global variables, except their
use is restricted to the file in which they are declared.

* Accessing array out of bounds in C/C++
[Source: [[https://www.geeksforgeeks.org/accessing-array-bounds-ccpp/][GeeksforGeeks]]]
- C don’t provide any specification which deal with problem of
  accessing invalid index. As per ISO C standard it is called
  Undefined Behavior.
** Examples of Undefined Behavior while accessing array out of bounds 
1. Access non allocated location of memory: The program can access
   some piece of memory which is owned by it. 
2. Segmentation fault: The program can access some piece of memory
   which is not owned by it, which can cause crashing of program such
   as segmentation fault.
** Important Points:

   - Stay inside the bounds of the array in C programming while using
    arrays to avoid any such errors.

   - C++ however offers the std::vector class template, which does not
    require to perform bounds checking. A vector also has the
    std::at() member function which can perform bounds-checking.
* Embedded C specific
** TODO What is an ISR?
- An ISR (Interrupt Service Routine) is an interrupt handler, a
  callback subroutine which is called when a interrupt is encountered.
** What is the return type of ISR?
- ISR does not return anything. An ISR returns nothing because there
  is no caller in the code to read the returned values.
** What is interrupt latency?
- Interrrupt latency is the time required for an ISR to respond to an
  interrupt.
** How to reduce interrupt latency?
- Interrupt latencies can be minimized by writing short ISR routine
  and by not delaying interrupts for more time.
** Can we use any function inside ISR?
- We can use function inside ISR as long as that function is not
  invoked from other portion of the code.
** Can we use printf inside ISR?
- Printf function in ISR is not supported because printf function is
  not re-entrant, thread safe and uses dynamic memory allocation which
  takes a lot of time and can affect the speed of an ISR up to a great
  extent.
** Can we put a breakpoint inside ISR?
- Putting a breakpoint inside ISR is not a good idea because debugging
  will take some time and a difference of half or more second will
  lead to a different behavior of hardware.
- To debug ISR, definitive logs are better
*** TODO What are definitive logs?
[read more [[https://www.embedded.com/electronics-blogs/beginner-s-corner/4023970/Introduction-to-Interrupt-Debugging][here]]]
*** 
** Is Count_Down_to_Zero loop better that n Count_Up loop?
- Count down to zero loops are better. The reason behind this is that
  at loop termination, comparison to zero can be optimized by the
  compiler.
- Most processors have instructions for comparing to zero.
- So, they don't need to load the loop variable and the maximum value,
  subtract them and then compare to zero. That is why count down to
  zero is better.
** What happens if recursion function is declared inline?

An inline function replaces the call to the function by the body of
the function, thus reducing the overhead of saving the context in
stack. This is good for functions which are small in size and called
occasionally. A recursive function calls an instance of itself and
thus can be a deeply nested. 


Different compilers handle this differently. Some will inline it up to
a certain depth and then call a non-inlined instance for further
recursion; others will not inline the function at all and generate a
normal function call. 
** Proper Watchdog timer use; How can watchdog timer be implemented in Software?
